diff --git a/node_modules/gatsby-theme-mdx-deck/gatsby-config.js b/node_modules/gatsby-theme-mdx-deck/gatsby-config.js
index 57586e9..27c9b30 100644
--- a/node_modules/gatsby-theme-mdx-deck/gatsby-config.js
+++ b/node_modules/gatsby-theme-mdx-deck/gatsby-config.js
@@ -1,6 +1,6 @@
 const IS_LOCAL = process.cwd() === __dirname
 
-const remarkPlugins = [require('remark-unwrap-images'), require('remark-emoji')]
+const remarkPlugins = [require('remark-unwrap-images'), require('remark-emoji'), require('remark-import-partial')]
 const gatsbyRemarkPlugins = [`gatsby-remark-import-code`]
 
 const config = (opts = {}) => {
diff --git a/node_modules/gatsby-theme-mdx-deck/src/split-slides.js b/node_modules/gatsby-theme-mdx-deck/src/split-slides.js
index 6f1bcd8..cae24f1 100644
--- a/node_modules/gatsby-theme-mdx-deck/src/split-slides.js
+++ b/node_modules/gatsby-theme-mdx-deck/src/split-slides.js
@@ -8,7 +8,29 @@ export default props => {
     props: {},
     children: [],
   }
-  arr.forEach((child, i) => {
+  
+  // This is for allowing importing MDX partials via
+  // this syntax using the remark plugin below.
+  //
+  // {@import ../../partials/qualityAssurance.mdx}
+  //
+  // https://github.com/dotansimha/remark-import-partial
+  const flattenedArray = arr.reduce((acc, child) => {
+    if (
+      child.props.originalType === 'p' &&
+      Array.isArray(child.props.children) &&
+      child.props.children.every(
+        (c) => c.type?.displayName === 'MDXCreateElement'
+      )
+    ) {
+      acc.push(...child.props.children)
+      return acc
+    }
+    acc.push(child)
+    return acc
+  }, [])
+  
+  flattenedArray.forEach((child, i) => {
     const {
       originalType,
       mdxType,
@@ -25,12 +47,12 @@ export default props => {
   })
   let previousSplit = 0
   splits.forEach(i => {
-    const children = [...arr.slice(previousSplit, i)]
+    const children = [...flattenedArray.slice(previousSplit, i)]
     slides.push(children)
     previousSplit = i + 1
   })
 
-  slides.push([...arr.slice(previousSplit)])
+  slides.push([...flattenedArray.slice(previousSplit)])
 
   slides.head.children = React.Children.toArray(slides.head.children).map(
     (child, i) => {
